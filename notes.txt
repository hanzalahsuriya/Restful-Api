// HTTP Methods

    // GET
    // url: /api/authors                (to get list of all the authors)
    // url: /api/authors/{authorId}     (to get a single author)

    // POST
    // url: /api/authors                (Request payload: Author) to create a new author

    // PUT
    // url: /api/authors/{authorId}    (Request Payload: Author) to full update 

    // PATCH
    // url: /api/authors/{authorId}     (Request Payload: JsonPatchDocument of Author) to update selected fields

    // DELETE
    // url: /api/authors/{authorId}     (To delete author)

    // HEAD
    // url: /api/authors                (no response ... can be used to testing for validtity)
    // url: /api/authors/{authorId}

    // OPTIONS
    // url: /api/authors                (no response ... to tell us about the what methods are available on this uri)


    // Status Code

    // 100 
    // Information and were part of HTTP 1 ... and not used by API

    // 200's .... successfull status codes
    // 200 - Success
    // 201 - Created
    // 204 - No Content

    // 300's ... used for redirection (not much used by api)

    // 400's ... client mistakes
    // 400 - Bad Request... consumer of the api has sent something wrong.
    // 401 - Unauthorised (not logged in)
    // 403 - Forbidden  (logged in but don't have access)
    // 404 - Not Found (request doesn't exists)
    // 405 - Method not allowed (trying to send a http requst where a HTTP method is not allowed)
    // 406 - Not acceptable (when trying to call api with content type which is not acceptable)]
    // 409 - Conflict (request conflict with current state of the system)
    // 422 - unprocessable entity - (for e.g. if validation rule failed)

    // 500's ... Server Mistakes
    // 500 - Internal Server Error


    // Method Safety and Idempotency

    // GET
    // Safe: Yes
    // Idempotent: Yes

    // OPTIONS
    // Safe: Yes
    // Idempotent: Yes

    // HEAD
    // Safe: Yes
    // Idempotent: Yes

    // POST
    // Safe: No
    // Idempotent: No

    // PUT
    // Safe: No
    // Idempotent: Yes

    // PATCH
    // Safe: No
    // Idempotent: No

    // DELETE
    // Safe: No
    // Idempotent: Yes



	Content Negotiation:
	Accept header of HTTP Request Message.
	Consumer of the application should pass requested media type through this header.
		application/json
		application/xml

	If api supports provided format from Accept header... it should return data in that format.
	If no accept header .. or api doesn't support requesed format... than it should return default format. 
	if we don't support default format... 406 not acceptable must be returned. 

	services.AddMvc(options =>
            {
                options.ReturnHttpNotAcceptable = true;
                options.OutputFormatters.Add(new XmlDataContractSerializerOutputFormatter());
                options.InputFormatters.Add(new XmlDataContractSerializerInputFormatter());
            });


	ReturnHttpNotAcceptable by default is false. 
	return 406 if no formatted is selected.


	Accept: application/json
	Content-Type: application/json

	Content type contains media type of a requets body.


	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///

	For CreatedAtRoute - check location header in http response.


	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///	///


	For JSONPatchDocument:
	Add:
	{ op: "add", path: "/a/b", value: "foo" }

	Remove:
	{ op: "remove", path: "/a/b" }

	Replace:
	{ op: "replace", path: "/a/b", value: "foo" }

	Copy:
	{ op: "copy", from: "/a/c", path: "/a/b" }

	Move:
	{ op: "moce", from: "/a/c", path: "/a/b" }

	Test:
	{ op: "test", from: "/a/c", value: "foo" }





